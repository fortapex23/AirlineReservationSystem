@using TravelProgram.MVC.ViewModels.FlightVMs
@model List<FlightGetVM>

@foreach (var item in Model) //.Where(x => x.DepartureTime > DateTime.UtcNow.AddDays(1))
{
    <main style="margin-top: 20px" class="ticket-system">
        <div class="receipts-wrapper">
            <div class="receipts">
                <div class="receipt">
                    <div style="display: flex; justify-content: space-between">
                        <div style="display: flex; flex-direction:column">
                            <div>
                                <i class="fa-solid fa-plane-departure"></i>
                                <a style="font-family: cursive; font-size: medium; margin-left: 3px">
                                    @(item.Plane != null && !string.IsNullOrEmpty(item.Plane.AirlineName) ? item.Plane.AirlineName : "Airline Not Available")
                                </a>
                            </div>
                            @* <div>
                                <i class="fa-solid fa-plane"></i>
                                <a style="font-family: cursive; font-size: medium; margin-left: 3px">@item.PlaneName</a>
                            </div> *@
                        </div>
                        <div>
                            @* <form asp-action="AddToBasket" asp-controller="Home" asp-route-flightId="@item.Id" method="post">
                                <button class="btn btn-outline-success" style="background-color: white; border: 10px; border-color: forestgreen" type="submit">
                                    <i style="color: forestgreen; font-size: 25px; margin-top: 10px" class="fa-regular fa-heart"></i>
                                </button>
                            </form> *@

                            <i class="fa-solid fa-plane"></i>
                            <a style="font-family: cursive; font-size: medium; margin-left: 3px">@item.PlaneName</a>
                        </div>
                    </div>
                    <div class="route">
                        <h2>@item.DepartureAirportCity</h2>
                        <svg class="plane-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 510 510">
                            <path fill="#3f32e5" d="M497.25 357v-51l-204-127.5V38.25C293.25 17.85 275.4 0 255 0s-38.25 17.85-38.25 38.25V178.5L12.75 306v51l204-63.75V433.5l-51 38.25V510L255 484.5l89.25 25.5v-38.25l-51-38.25V293.25l204 63.75z" />
                        </svg>
                        <h2>@item.ArrivalAirportCity</h2>
                    </div>
                    <div class="details">
                        <div style="display: flex; align-items: center; justify-content: center">
                            <div class="item">
                                <span>Departure time</span>
                                <h3 style="font-family: Arial; font-size: larger; margin-left: 15px">@item.DepartureTime.ToString("MM/dd HH:mm")</h3>
                            </div>
                            <div style="margin-left: 30px">
                                <i style="font-size:large" class="fa-solid fa-arrow-right"></i>
                            </div>
                            <div style="margin-left: 50px" class="item">
                                <span>Arrival time</span>
                                <h3 style="font-family: Arial; font-size: larger; margin-left: 8px">@item.ArrivalTime.ToString("MM/dd HH:mm")</h3>
                            </div>
                        </div>
                        <div class="item">
                            <span>Flight No.</span>
                            <h3 style="font-family: Arial; font-size: larger">@item.FlightNumber</h3>
                        </div>
                        @* <div class="item">
                            <span>Plane</span>
                            <h3 style="font-family: Arial; font-size: large">@item.PlaneName</h3>
                        </div> *@
                        <div class="item">
                            <span>Economy Seat</span>
                            <h3 style="font-family: Arial; font-size: larger">$@item.EconomySeatPrice</h3>
                        </div>
                        <div class="item">
                            <span>Business Seat</span>
                            <h3 style="font-family: Arial; font-size: larger">$@item.BusinessSeatPrice</h3>
                        </div>
                        <div class="item">
                            <span>Economy Seats</span>
                            <h3 style="font-family: Arial; font-size: larger">@item.Seats.Where(x => x.ClassType == TravelProgram.MVC.Enums.SeatClassType.Economy).Count()</h3>
                        </div>
                        <div class="item">
                            <span>Business Seats</span>
                            <h3 style="font-family: Arial; font-size: larger">@item.Seats.Where(x => x.ClassType == TravelProgram.MVC.Enums.SeatClassType.Business).Count()</h3>
                        </div>
                    </div>
                </div>
                <div style="display:flex;flex-direction:column" class="receipt qr-code">
                    @if (ViewBag.Role is not null)
                    {
                        <a data-bs-toggle="modal" data-bs-target="#staticBackdrop_@item.Id" class="btn btn-outline-primary">Select Seats<i style="margin-left: 3px" class="fas fa-arrow-right"></i></a>

                    }
                    else
                    {
                        <a class="text-danger">login to add seats to basket</a>
                    }
                </div>
            </div>
        </div>
    </main>


    <!-- Seat Selection Modal -->
    <div class="modal fade" id="staticBackdrop_@item.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel_@item.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 style="font-size: 25px" class="modal-title fs-5" id="staticBackdropLabel_@item.Id">Choose a Seat</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">x</button>
                </div>
                <form asp-action="AddToBasket" asp-controller="Home" method="post">
                    <div class="modal-body">
                        <div id="selectedSeatsContainer_@item.Id"></div>

                        <div id="noSeatsSelectedMessage_@item.Id" style="color: red; font-weight: bold; display: none;">
                            You have not selected any seats.
                        </div>


                        <h5>Business Seats</h5>
                        <div class="seat-layout business-seats">
                            @foreach (var seat in item.Seats.Where(x => x.ClassType == TravelProgram.MVC.Enums.SeatClassType.Business))
                            {
                                <button type="button" class="seat @((seat.IsAvailable ? "available" : "unavailable"))"
                                    data-seat-id="@seat.Id"
                                    onclick="selectSeat(this, @seat.Id, @item.Id)"
                                    @(seat.IsAvailable ? "" : "disabled")>
                                    @seat.SeatNumber
                                </button>
                            }
                        </div>


                        <h5>Economy Seats</h5>
                        <div class="seat-layout economy-seats">
                            @foreach (var seat in item.Seats.Where(x => x.ClassType == TravelProgram.MVC.Enums.SeatClassType.Economy))
                            {
                                <button type="button" class="seat @((seat.IsAvailable ? "available" : "unavailable"))"
                                        data-seat-id="@seat.Id"
                                        onclick="selectSeat(this, @seat.Id, @item.Id)"
                                    @(seat.IsAvailable ? "" : "disabled")>
                                    @seat.SeatNumber
                                </button>
                            }
                        </div>

                    </div>
                    <div asp-validation-summary="ModelOnly"></div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <style>
        .seat-layout {
            display: grid;
            gap: 10px;
            padding: 10px;
            margin-bottom: 20px;
        }

        .business-seats {
            grid-template-columns: repeat(4, 1fr);
        }

        .economy-seats {
            grid-template-columns: repeat(4, 1fr);
        }

        .seat {
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #ccc;
            cursor: pointer;
        }

        .seat.available {
            background-color: #28a745;
            color: #fff;
        }

        .seat.unavailable {
            background-color: #dc3545;
            color: #fff;
            cursor: not-allowed;
        }

        .seat.selected {
            background-color: #007bff;
            color: #fff;
        }
    </style>


    <script>
        const selectedSeatsByFlight = {};

        function selectSeat(button, seatId, flightId) {
            if (!selectedSeatsByFlight[flightId]) {
                selectedSeatsByFlight[flightId] = new Set();
            }

            const selectedSeats = selectedSeatsByFlight[flightId];
            const selectedSeatsContainer = document.getElementById('selectedSeatsContainer_' + flightId);
            const noSeatsMessage = document.getElementById('noSeatsSelectedMessage_' + flightId);

            if (button.classList.contains('selected')) {
                button.classList.remove('selected');
                selectedSeats.delete(seatId);
            } else {
                button.classList.add('selected');
                selectedSeats.add(seatId);
            }

            selectedSeatsContainer.innerHTML = '';
            selectedSeats.forEach(id => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'SelectedSeats';
                input.value = id;
                selectedSeatsContainer.appendChild(input);
            });

            noSeatsMessage.style.display = selectedSeats.size > 0 ? 'none' : 'block';
        }

        function resetSeatSelection(flightId) {
            const seats = document.querySelectorAll(`#staticBackdrop_${flightId} .seat.selected`);
            seats.forEach(seat => seat.classList.remove('selected'));
            selectedSeatsByFlight[flightId] = new Set();
        }

        document.addEventListener("DOMContentLoaded", function () {
            const modals = document.querySelectorAll(".modal");
            modals.forEach(modal => {
                const flightId = modal.id.split("_")[1];

                const form = modal.querySelector("form");
                form.addEventListener("submit", function () {
                    resetSeatSelection(flightId);
                });

                modal.addEventListener("hidden.bs.modal", function () {
                    resetSeatSelection(flightId);
                    document.getElementById('selectedSeatsContainer_' + flightId).innerHTML = '';
                    document.getElementById('noSeatsSelectedMessage_' + flightId).style.display = 'block';
                });
            });
        });

    </script>
}